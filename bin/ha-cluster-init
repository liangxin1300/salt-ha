#!/usr/bin/env python3

# link to salt runner
# [10.10.10.0]
# [239.137.131.248]
# [5405]

# sbd

import sys
import re
import salt.client


_OK = '\033[92m'
_WARNING = '\033[93m'
_ERROR = '\033[91m'
_BOLD = '\033[1m'
_END = '\033[0m'


def p_base(_type, msg):
    print(_type + _BOLD + msg + _BOLD + _END)


def p_info(msg):
    p_base(_OK, "Info: %s" % msg)


def p_warning(msg):
    p_base(_WARNING, "Warning: %s" % msg)


def p_err(msg):
    p_base(_ERROR, "Error: %s" % msg)


def raw_input(prompt=""):
    try:
        text = input(prompt)
    except KeyboardInterrupt:
        print("\nbye")
        sys.exit(1)
    
    return text.strip()


def validate_data(_inputs, origin):
    _items = re.split(r'[ ,|]', _inputs)
    for _item in _items:
        if _item not in origin:
            p_err("'%s' not in [%s]" % (_item, ' '.join(origin)))
            return False
    return True


def validate_port(port, data=None):
    if int(port) >= 1024 and int(port) <= 65535:
        return True
    else:
        p_err("'%s' is invalid" % port)
        return False


def _input(msg, default, val_func, data=None):
    while True:
        _res = raw_input(msg)
        if not _res:
            _res = default
        if val_func(_res, data):
            return re.split(r'[ ,|]', _res)


def choose_cluster_nodes(nodes_list):
    msg = "Input cluster nodes [%s]: " % ' '.join(node_list)
    return _input(msg, ' '.join(node_list), validate_data, node_list)


def choose_bindnet_address(data, cluster_nodes):
    _temp = set(data[cluster_nodes[0]])
    if len(cluster_nodes) > 1:
        for node in cluster_nodes[1:]:
            _temp &= set(data[node])
    _common_addrs = [ x.split('/')[0] for x in _temp ]

    msg = "Input bindnet address [%s]:" % ' '.join(_common_addrs)
    return _input(msg, _common_addrs[0], validate_data, _common_addrs)
    """
    while True:
        _addr = raw_input("Input bindnet address [%s]:" % ' '.join(_common_addrs))
        if not _addr:
            _addr = _common_addrs[0]
        if validate_data(_common_addrs, _addr):
            return _addr
    """

def choose_services(services):
    while True:
       _services = raw_input("Choose services [%s]:" % services)
       if not _services:
           _services = "base"
       if validate_data(services.split(), _services):
            return re.split(r'[ ,|]', _services)


def input_cluster_port():
    while True:
        port = raw_input("Input port [5405]: ")
        if not port:
            port = 5405
        if int(port) >= 1024 and int(port) <= 65535:
            return port
        else:
            pass


if __name__ == '__main__':

    local = salt.client.LocalClient()
    res = local.cmd('*', 'network.subnets')
    node_list = list(res.keys())

    print("")
    cluster_nodes   = choose_cluster_nodes(node_list)
    bindnet_address = choose_bindnet_address(res, cluster_nodes)
    cluster_port    = input_cluster_port()

    print("")
    p_info("Cluster nodes:   [%s]" % ' '.join(cluster_nodes))
    p_info("Bindnet address: %s" % bindnet_address)
    p_info("Port:            %s" % cluster_port)

    print("")
    service_string = "base sbd vip ocfs2"
    services = choose_services(service_string)
    print("")
    p_info("Services: %s" % ' '.join(services))
